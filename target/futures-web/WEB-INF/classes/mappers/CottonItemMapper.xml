<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tay.futures.dao.CottonItemMapper" >
  <resultMap id="BaseResultMap" type="com.tay.futures.entity.CottonItem" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="batch_id" property="batchId" jdbcType="BIGINT" />
    <result column="barcod" property="barcod" jdbcType="BIGINT" />
    <result column="colour_level" property="colourLevel" jdbcType="VARCHAR" />
    <result column="length" property="length" jdbcType="INTEGER" />
    <result column="strength" property="strength" jdbcType="INTEGER" />
    <result column="micronaire" property="micronaire" jdbcType="INTEGER" />
    <result column="evenness" property="evenness" jdbcType="INTEGER" />
    <result column="ginning_quality" property="ginningQuality" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="yellow_level" property="yellowLevel" jdbcType="INTEGER" />
    <result column="reflectivity" property="reflectivity" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, batch_id, barcod, colour_level, `length`, strength, micronaire, evenness, ginning_quality, 
    create_date, yellow_level, reflectivity
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.tay.futures.entity.CottonItemExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cotton_item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from cotton_item
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from cotton_item
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.tay.futures.entity.CottonItemExample" >
    delete from cotton_item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.tay.futures.entity.CottonItem" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into cotton_item (batch_id, barcod, colour_level, 
      `length`, strength, micronaire, 
      evenness, ginning_quality, create_date, 
      yellow_level, reflectivity)
    values (#{batchId,jdbcType=BIGINT}, #{barcod,jdbcType=BIGINT}, #{colourLevel,jdbcType=VARCHAR}, 
      #{length,jdbcType=INTEGER}, #{strength,jdbcType=INTEGER}, #{micronaire,jdbcType=INTEGER}, 
      #{evenness,jdbcType=INTEGER}, #{ginningQuality,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, 
      #{yellowLevel,jdbcType=INTEGER}, #{reflectivity,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.tay.futures.entity.CottonItem" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into cotton_item
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="batchId != null" >
        batch_id,
      </if>
      <if test="barcod != null" >
        barcod,
      </if>
      <if test="colourLevel != null" >
        colour_level,
      </if>
      <if test="length != null" >
        `length`,
      </if>
      <if test="strength != null" >
        strength,
      </if>
      <if test="micronaire != null" >
        micronaire,
      </if>
      <if test="evenness != null" >
        evenness,
      </if>
      <if test="ginningQuality != null" >
        ginning_quality,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="yellowLevel != null" >
        yellow_level,
      </if>
      <if test="reflectivity != null" >
        reflectivity,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="batchId != null" >
        #{batchId,jdbcType=BIGINT},
      </if>
      <if test="barcod != null" >
        #{barcod,jdbcType=BIGINT},
      </if>
      <if test="colourLevel != null" >
        #{colourLevel,jdbcType=VARCHAR},
      </if>
      <if test="length != null" >
        #{length,jdbcType=INTEGER},
      </if>
      <if test="strength != null" >
        #{strength,jdbcType=INTEGER},
      </if>
      <if test="micronaire != null" >
        #{micronaire,jdbcType=INTEGER},
      </if>
      <if test="evenness != null" >
        #{evenness,jdbcType=INTEGER},
      </if>
      <if test="ginningQuality != null" >
        #{ginningQuality,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="yellowLevel != null" >
        #{yellowLevel,jdbcType=INTEGER},
      </if>
      <if test="reflectivity != null" >
        #{reflectivity,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.tay.futures.entity.CottonItemExample" resultType="java.lang.Integer" >
    select count(*) from cotton_item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update cotton_item
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.batchId != null" >
        batch_id = #{record.batchId,jdbcType=BIGINT},
      </if>
      <if test="record.barcod != null" >
        barcod = #{record.barcod,jdbcType=BIGINT},
      </if>
      <if test="record.colourLevel != null" >
        colour_level = #{record.colourLevel,jdbcType=VARCHAR},
      </if>
      <if test="record.length != null" >
        `length` = #{record.length,jdbcType=INTEGER},
      </if>
      <if test="record.strength != null" >
        strength = #{record.strength,jdbcType=INTEGER},
      </if>
      <if test="record.micronaire != null" >
        micronaire = #{record.micronaire,jdbcType=INTEGER},
      </if>
      <if test="record.evenness != null" >
        evenness = #{record.evenness,jdbcType=INTEGER},
      </if>
      <if test="record.ginningQuality != null" >
        ginning_quality = #{record.ginningQuality,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.yellowLevel != null" >
        yellow_level = #{record.yellowLevel,jdbcType=INTEGER},
      </if>
      <if test="record.reflectivity != null" >
        reflectivity = #{record.reflectivity,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update cotton_item
    set id = #{record.id,jdbcType=BIGINT},
      batch_id = #{record.batchId,jdbcType=BIGINT},
      barcod = #{record.barcod,jdbcType=BIGINT},
      colour_level = #{record.colourLevel,jdbcType=VARCHAR},
      `length` = #{record.length,jdbcType=INTEGER},
      strength = #{record.strength,jdbcType=INTEGER},
      micronaire = #{record.micronaire,jdbcType=INTEGER},
      evenness = #{record.evenness,jdbcType=INTEGER},
      ginning_quality = #{record.ginningQuality,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      yellow_level = #{record.yellowLevel,jdbcType=INTEGER},
      reflectivity = #{record.reflectivity,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.tay.futures.entity.CottonItem" >
    update cotton_item
    <set >
      <if test="batchId != null" >
        batch_id = #{batchId,jdbcType=BIGINT},
      </if>
      <if test="barcod != null" >
        barcod = #{barcod,jdbcType=BIGINT},
      </if>
      <if test="colourLevel != null" >
        colour_level = #{colourLevel,jdbcType=VARCHAR},
      </if>
      <if test="length != null" >
        `length` = #{length,jdbcType=INTEGER},
      </if>
      <if test="strength != null" >
        strength = #{strength,jdbcType=INTEGER},
      </if>
      <if test="micronaire != null" >
        micronaire = #{micronaire,jdbcType=INTEGER},
      </if>
      <if test="evenness != null" >
        evenness = #{evenness,jdbcType=INTEGER},
      </if>
      <if test="ginningQuality != null" >
        ginning_quality = #{ginningQuality,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="yellowLevel != null" >
        yellow_level = #{yellowLevel,jdbcType=INTEGER},
      </if>
      <if test="reflectivity != null" >
        reflectivity = #{reflectivity,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tay.futures.entity.CottonItem" >
    update cotton_item
    set batch_id = #{batchId,jdbcType=BIGINT},
      barcod = #{barcod,jdbcType=BIGINT},
      colour_level = #{colourLevel,jdbcType=VARCHAR},
      `length` = #{length,jdbcType=INTEGER},
      strength = #{strength,jdbcType=INTEGER},
      micronaire = #{micronaire,jdbcType=INTEGER},
      evenness = #{evenness,jdbcType=INTEGER},
      ginning_quality = #{ginningQuality,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      yellow_level = #{yellowLevel,jdbcType=INTEGER},
      reflectivity = #{reflectivity,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>