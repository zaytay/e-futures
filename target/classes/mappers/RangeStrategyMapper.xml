<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tay.futures.dao.RangeStrategyMapper" >
  <resultMap id="BaseResultMap" type="com.tay.futures.entity.RangeStrategy" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="template_id" property="templateId" jdbcType="BIGINT" />
    <result column="min" property="min" jdbcType="DOUBLE" />
    <result column="max" property="max" jdbcType="DOUBLE" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="price" property="price" jdbcType="DOUBLE" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, template_id, `min`, `max`, `type`, create_date, price
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.tay.futures.entity.RangeStrategyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from range_strategy
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from range_strategy
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from range_strategy
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.tay.futures.entity.RangeStrategyExample" >
    delete from range_strategy
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.tay.futures.entity.RangeStrategy" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into range_strategy (template_id, `min`, `max`, 
      `type`, create_date, price
      )
    values (#{templateId,jdbcType=BIGINT}, #{min,jdbcType=DOUBLE}, #{max,jdbcType=DOUBLE}, 
      #{type,jdbcType=TINYINT}, #{createDate,jdbcType=TIMESTAMP}, #{price,jdbcType=DOUBLE}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.tay.futures.entity.RangeStrategy" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into range_strategy
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="templateId != null" >
        template_id,
      </if>
      <if test="min != null" >
        `min`,
      </if>
      <if test="max != null" >
        `max`,
      </if>
      <if test="type != null" >
        `type`,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="price != null" >
        price,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="templateId != null" >
        #{templateId,jdbcType=BIGINT},
      </if>
      <if test="min != null" >
        #{min,jdbcType=DOUBLE},
      </if>
      <if test="max != null" >
        #{max,jdbcType=DOUBLE},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.tay.futures.entity.RangeStrategyExample" resultType="java.lang.Integer" >
    select count(*) from range_strategy
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update range_strategy
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.templateId != null" >
        template_id = #{record.templateId,jdbcType=BIGINT},
      </if>
      <if test="record.min != null" >
        `min` = #{record.min,jdbcType=DOUBLE},
      </if>
      <if test="record.max != null" >
        `max` = #{record.max,jdbcType=DOUBLE},
      </if>
      <if test="record.type != null" >
        `type` = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update range_strategy
    set id = #{record.id,jdbcType=BIGINT},
      template_id = #{record.templateId,jdbcType=BIGINT},
      `min` = #{record.min,jdbcType=DOUBLE},
      `max` = #{record.max,jdbcType=DOUBLE},
      `type` = #{record.type,jdbcType=TINYINT},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      price = #{record.price,jdbcType=DOUBLE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.tay.futures.entity.RangeStrategy" >
    update range_strategy
    <set >
      <if test="templateId != null" >
        template_id = #{templateId,jdbcType=BIGINT},
      </if>
      <if test="min != null" >
        `min` = #{min,jdbcType=DOUBLE},
      </if>
      <if test="max != null" >
        `max` = #{max,jdbcType=DOUBLE},
      </if>
      <if test="type != null" >
        `type` = #{type,jdbcType=TINYINT},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DOUBLE},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tay.futures.entity.RangeStrategy" >
    update range_strategy
    set template_id = #{templateId,jdbcType=BIGINT},
      `min` = #{min,jdbcType=DOUBLE},
      `max` = #{max,jdbcType=DOUBLE},
      `type` = #{type,jdbcType=TINYINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      price = #{price,jdbcType=DOUBLE}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>